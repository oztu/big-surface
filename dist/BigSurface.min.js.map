{"version":3,"file":"BigSurface.min.js","sources":["/Users/ozan/code/boilerplate-gulp/node_modules/browserify/node_modules/browser-pack/_prelude.js","/Users/ozan/code/big-surface/bower_components/eventEmitter/EventEmitter.js","/Users/ozan/code/big-surface/bower_components/hammerjs/hammer.js","/Users/ozan/code/big-surface/src/surface.js","/Users/ozan/code/big-surface/src/utils.js"],"names":[],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * EventEmitter v4.2.8 - git.io/ee\n * Oliver Caldwell\n * MIT license\n * @preserve\n */\n\n(function () {\n\t'use strict';\n\n\t/**\n\t * Class for managing events.\n\t * Can be extended to provide event functionality in other classes.\n\t *\n\t * @class EventEmitter Manages event registering and emitting.\n\t */\n\tfunction EventEmitter() {}\n\n\t// Shortcuts to improve speed and size\n\tvar proto = EventEmitter.prototype;\n\tvar exports = this;\n\tvar originalGlobalValue = exports.EventEmitter;\n\n\t/**\n\t * Finds the index of the listener for the event in its storage array.\n\t *\n\t * @param {Function[]} listeners Array of listeners to search through.\n\t * @param {Function} listener Method to look for.\n\t * @return {Number} Index of the specified listener, -1 if not found\n\t * @api private\n\t */\n\tfunction indexOfListener(listeners, listener) {\n\t\tvar i = listeners.length;\n\t\twhile (i--) {\n\t\t\tif (listeners[i].listener === listener) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Alias a method while keeping the context correct, to allow for overwriting of target method.\n\t *\n\t * @param {String} name The name of the target method.\n\t * @return {Function} The aliased method\n\t * @api private\n\t */\n\tfunction alias(name) {\n\t\treturn function aliasClosure() {\n\t\t\treturn this[name].apply(this, arguments);\n\t\t};\n\t}\n\n\t/**\n\t * Returns the listener array for the specified event.\n\t * Will initialise the event object and listener arrays if required.\n\t * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\n\t * Each property in the object response is an array of listener functions.\n\t *\n\t * @param {String|RegExp} evt Name of the event to return the listeners from.\n\t * @return {Function[]|Object} All listener functions for the event.\n\t */\n\tproto.getListeners = function getListeners(evt) {\n\t\tvar events = this._getEvents();\n\t\tvar response;\n\t\tvar key;\n\n\t\t// Return a concatenated array of all matching events if\n\t\t// the selector is a regular expression.\n\t\tif (evt instanceof RegExp) {\n\t\t\tresponse = {};\n\t\t\tfor (key in events) {\n\t\t\t\tif (events.hasOwnProperty(key) && evt.test(key)) {\n\t\t\t\t\tresponse[key] = events[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresponse = events[evt] || (events[evt] = []);\n\t\t}\n\n\t\treturn response;\n\t};\n\n\t/**\n\t * Takes a list of listener objects and flattens it into a list of listener functions.\n\t *\n\t * @param {Object[]} listeners Raw listener objects.\n\t * @return {Function[]} Just the listener functions.\n\t */\n\tproto.flattenListeners = function flattenListeners(listeners) {\n\t\tvar flatListeners = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < listeners.length; i += 1) {\n\t\t\tflatListeners.push(listeners[i].listener);\n\t\t}\n\n\t\treturn flatListeners;\n\t};\n\n\t/**\n\t * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.\n\t *\n\t * @param {String|RegExp} evt Name of the event to return the listeners from.\n\t * @return {Object} All listener functions for an event in an object.\n\t */\n\tproto.getListenersAsObject = function getListenersAsObject(evt) {\n\t\tvar listeners = this.getListeners(evt);\n\t\tvar response;\n\n\t\tif (listeners instanceof Array) {\n\t\t\tresponse = {};\n\t\t\tresponse[evt] = listeners;\n\t\t}\n\n\t\treturn response || listeners;\n\t};\n\n\t/**\n\t * Adds a listener function to the specified event.\n\t * The listener will not be added if it is a duplicate.\n\t * If the listener returns true then it will be removed after it is called.\n\t * If you pass a regular expression as the event name then the listener will be added to all events that match it.\n\t *\n\t * @param {String|RegExp} evt Name of the event to attach the listener to.\n\t * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.addListener = function addListener(evt, listener) {\n\t\tvar listeners = this.getListenersAsObject(evt);\n\t\tvar listenerIsWrapped = typeof listener === 'object';\n\t\tvar key;\n\n\t\tfor (key in listeners) {\n\t\t\tif (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {\n\t\t\t\tlisteners[key].push(listenerIsWrapped ? listener : {\n\t\t\t\t\tlistener: listener,\n\t\t\t\t\tonce: false\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * Alias of addListener\n\t */\n\tproto.on = alias('addListener');\n\n\t/**\n\t * Semi-alias of addListener. It will add a listener that will be\n\t * automatically removed after its first execution.\n\t *\n\t * @param {String|RegExp} evt Name of the event to attach the listener to.\n\t * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.addOnceListener = function addOnceListener(evt, listener) {\n\t\treturn this.addListener(evt, {\n\t\t\tlistener: listener,\n\t\t\tonce: true\n\t\t});\n\t};\n\n\t/**\n\t * Alias of addOnceListener.\n\t */\n\tproto.once = alias('addOnceListener');\n\n\t/**\n\t * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\n\t * You need to tell it what event names should be matched by a regex.\n\t *\n\t * @param {String} evt Name of the event to create.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.defineEvent = function defineEvent(evt) {\n\t\tthis.getListeners(evt);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Uses defineEvent to define multiple events.\n\t *\n\t * @param {String[]} evts An array of event names to define.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.defineEvents = function defineEvents(evts) {\n\t\tfor (var i = 0; i < evts.length; i += 1) {\n\t\t\tthis.defineEvent(evts[i]);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Removes a listener function from the specified event.\n\t * When passed a regular expression as the event name, it will remove the listener from all events that match it.\n\t *\n\t * @param {String|RegExp} evt Name of the event to remove the listener from.\n\t * @param {Function} listener Method to remove from the event.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.removeListener = function removeListener(evt, listener) {\n\t\tvar listeners = this.getListenersAsObject(evt);\n\t\tvar index;\n\t\tvar key;\n\n\t\tfor (key in listeners) {\n\t\t\tif (listeners.hasOwnProperty(key)) {\n\t\t\t\tindex = indexOfListener(listeners[key], listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlisteners[key].splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * Alias of removeListener\n\t */\n\tproto.off = alias('removeListener');\n\n\t/**\n\t * Adds listeners in bulk using the manipulateListeners method.\n\t * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\n\t * You can also pass it a regular expression to add the array of listeners to all events that match it.\n\t * Yeah, this function does quite a bit. That's probably a bad thing.\n\t *\n\t * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.\n\t * @param {Function[]} [listeners] An optional array of listener functions to add.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.addListeners = function addListeners(evt, listeners) {\n\t\t// Pass through to manipulateListeners\n\t\treturn this.manipulateListeners(false, evt, listeners);\n\t};\n\n\t/**\n\t * Removes listeners in bulk using the manipulateListeners method.\n\t * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n\t * You can also pass it an event name and an array of listeners to be removed.\n\t * You can also pass it a regular expression to remove the listeners from all events that match it.\n\t *\n\t * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.\n\t * @param {Function[]} [listeners] An optional array of listener functions to remove.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.removeListeners = function removeListeners(evt, listeners) {\n\t\t// Pass through to manipulateListeners\n\t\treturn this.manipulateListeners(true, evt, listeners);\n\t};\n\n\t/**\n\t * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\n\t * The first argument will determine if the listeners are removed (true) or added (false).\n\t * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n\t * You can also pass it an event name and an array of listeners to be added/removed.\n\t * You can also pass it a regular expression to manipulate the listeners of all events that match it.\n\t *\n\t * @param {Boolean} remove True if you want to remove listeners, false if you want to add.\n\t * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.\n\t * @param {Function[]} [listeners] An optional array of listener functions to add/remove.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {\n\t\tvar i;\n\t\tvar value;\n\t\tvar single = remove ? this.removeListener : this.addListener;\n\t\tvar multiple = remove ? this.removeListeners : this.addListeners;\n\n\t\t// If evt is an object then pass each of its properties to this method\n\t\tif (typeof evt === 'object' && !(evt instanceof RegExp)) {\n\t\t\tfor (i in evt) {\n\t\t\t\tif (evt.hasOwnProperty(i) && (value = evt[i])) {\n\t\t\t\t\t// Pass the single listener straight through to the singular method\n\t\t\t\t\tif (typeof value === 'function') {\n\t\t\t\t\t\tsingle.call(this, i, value);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Otherwise pass back to the multiple function\n\t\t\t\t\t\tmultiple.call(this, i, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// So evt must be a string\n\t\t\t// And listeners must be an array of listeners\n\t\t\t// Loop over it and pass each one to the multiple method\n\t\t\ti = listeners.length;\n\t\t\twhile (i--) {\n\t\t\t\tsingle.call(this, evt, listeners[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * Removes all listeners from a specified event.\n\t * If you do not specify an event then all listeners will be removed.\n\t * That means every event will be emptied.\n\t * You can also pass a regex to remove all events that match it.\n\t *\n\t * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.removeEvent = function removeEvent(evt) {\n\t\tvar type = typeof evt;\n\t\tvar events = this._getEvents();\n\t\tvar key;\n\n\t\t// Remove different things depending on the state of evt\n\t\tif (type === 'string') {\n\t\t\t// Remove all listeners for the specified event\n\t\t\tdelete events[evt];\n\t\t}\n\t\telse if (evt instanceof RegExp) {\n\t\t\t// Remove all events matching the regex.\n\t\t\tfor (key in events) {\n\t\t\t\tif (events.hasOwnProperty(key) && evt.test(key)) {\n\t\t\t\t\tdelete events[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Remove all listeners in all events\n\t\t\tdelete this._events;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * Alias of removeEvent.\n\t *\n\t * Added to mirror the node API.\n\t */\n\tproto.removeAllListeners = alias('removeEvent');\n\n\t/**\n\t * Emits an event of your choice.\n\t * When emitted, every listener attached to that event will be executed.\n\t * If you pass the optional argument array then those arguments will be passed to every listener upon execution.\n\t * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.\n\t * So they will not arrive within the array on the other side, they will be separate.\n\t * You can also pass a regular expression to emit to all events that match it.\n\t *\n\t * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n\t * @param {Array} [args] Optional array of arguments to be passed to each listener.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.emitEvent = function emitEvent(evt, args) {\n\t\tvar listeners = this.getListenersAsObject(evt);\n\t\tvar listener;\n\t\tvar i;\n\t\tvar key;\n\t\tvar response;\n\n\t\tfor (key in listeners) {\n\t\t\tif (listeners.hasOwnProperty(key)) {\n\t\t\t\ti = listeners[key].length;\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\t// If the listener returns true then it shall be removed from the event\n\t\t\t\t\t// The function is executed either with a basic call or an apply if there is an args array\n\t\t\t\t\tlistener = listeners[key][i];\n\n\t\t\t\t\tif (listener.once === true) {\n\t\t\t\t\t\tthis.removeListener(evt, listener.listener);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = listener.listener.apply(this, args || []);\n\n\t\t\t\t\tif (response === this._getOnceReturnValue()) {\n\t\t\t\t\t\tthis.removeListener(evt, listener.listener);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * Alias of emitEvent\n\t */\n\tproto.trigger = alias('emitEvent');\n\n\t/**\n\t * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\n\t * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.\n\t *\n\t * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n\t * @param {...*} Optional additional arguments to be passed to each listener.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.emit = function emit(evt) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\treturn this.emitEvent(evt, args);\n\t};\n\n\t/**\n\t * Sets the current value to check against when executing listeners. If a\n\t * listeners return value matches the one set here then it will be removed\n\t * after execution. This value defaults to true.\n\t *\n\t * @param {*} value The new value to check for when executing listeners.\n\t * @return {Object} Current instance of EventEmitter for chaining.\n\t */\n\tproto.setOnceReturnValue = function setOnceReturnValue(value) {\n\t\tthis._onceReturnValue = value;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Fetches the current value to check against when executing listeners. If\n\t * the listeners return value matches this one then it should be removed\n\t * automatically. It will return true by default.\n\t *\n\t * @return {*|Boolean} The current value to check for or the default, true.\n\t * @api private\n\t */\n\tproto._getOnceReturnValue = function _getOnceReturnValue() {\n\t\tif (this.hasOwnProperty('_onceReturnValue')) {\n\t\t\treturn this._onceReturnValue;\n\t\t}\n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t};\n\n\t/**\n\t * Fetches the events object and creates one if required.\n\t *\n\t * @return {Object} The events storage object.\n\t * @api private\n\t */\n\tproto._getEvents = function _getEvents() {\n\t\treturn this._events || (this._events = {});\n\t};\n\n\t/**\n\t * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.\n\t *\n\t * @return {Function} Non conflicting EventEmitter class.\n\t */\n\tEventEmitter.noConflict = function noConflict() {\n\t\texports.EventEmitter = originalGlobalValue;\n\t\treturn EventEmitter;\n\t};\n\n\t// Expose the class either via AMD, CommonJS or the global object\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(function () {\n\t\t\treturn EventEmitter;\n\t\t});\n\t}\n\telse if (typeof module === 'object' && module.exports){\n\t\tmodule.exports = EventEmitter;\n\t}\n\telse {\n\t\tthis.EventEmitter = EventEmitter;\n\t}\n}.call(this));\n","/*! Hammer.JS - v1.0.11 - 2014-05-20\n * http://eightmedia.github.io/hammer.js\n *\n * Copyright (c) 2014 Jorik Tangelder <j.tangelder@gmail.com>;\n * Licensed under the MIT license */\n\n(function(window, undefined) {\n  'use strict';\n\n/**\n * Hammer\n * use this to create instances\n * @param   {HTMLElement}   element\n * @param   {Object}        options\n * @returns {Hammer.Instance}\n * @constructor\n */\nvar Hammer = function(element, options) {\n  return new Hammer.Instance(element, options || {});\n};\n\nHammer.VERSION = '1.0.11';\n\n// default settings\nHammer.defaults = {\n  // add styles and attributes to the element to prevent the browser from doing\n  // its native behavior. this doesnt prevent the scrolling, but cancels\n  // the contextmenu, tap highlighting etc\n  // set to false to disable this\n  stop_browser_behavior: {\n    // this also triggers onselectstart=false for IE\n    userSelect       : 'none',\n    // this makes the element blocking in IE10> and Chrome 35>, you could experiment with the value\n    // see for more options the wiki: https://github.com/EightMedia/hammer.js/wiki\n    touchAction      : 'pan-y',\n\n    touchCallout     : 'none',\n    contentZooming   : 'none',\n    userDrag         : 'none',\n    tapHighlightColor: 'rgba(0,0,0,0)'\n  }\n\n  //\n  // more settings are defined per gesture at /gestures\n  //\n};\n\n\n// detect touchevents\nHammer.HAS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;\nHammer.HAS_TOUCHEVENTS = ('ontouchstart' in window);\n\n// dont use mouseevents on mobile devices\nHammer.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;\nHammer.NO_MOUSEEVENTS = Hammer.HAS_TOUCHEVENTS && window.navigator.userAgent.match(Hammer.MOBILE_REGEX);\n\n// eventtypes per touchevent (start, move, end)\n// are filled by Event.determineEventTypes on setup\nHammer.EVENT_TYPES = {};\n\n// interval in which Hammer recalculates current velocity in ms\nHammer.UPDATE_VELOCITY_INTERVAL = 16;\n\n// hammer document where the base events are added at\nHammer.DOCUMENT = window.document;\n\n// define these also as vars, for better minification\n// direction defines\nvar DIRECTION_DOWN = Hammer.DIRECTION_DOWN = 'down';\nvar DIRECTION_LEFT = Hammer.DIRECTION_LEFT = 'left';\nvar DIRECTION_UP = Hammer.DIRECTION_UP = 'up';\nvar DIRECTION_RIGHT = Hammer.DIRECTION_RIGHT = 'right';\n\n// pointer type\nvar POINTER_MOUSE = Hammer.POINTER_MOUSE = 'mouse';\nvar POINTER_TOUCH = Hammer.POINTER_TOUCH = 'touch';\nvar POINTER_PEN = Hammer.POINTER_PEN = 'pen';\n\n// touch event defines\nvar EVENT_START = Hammer.EVENT_START = 'start';\nvar EVENT_MOVE = Hammer.EVENT_MOVE = 'move';\nvar EVENT_END = Hammer.EVENT_END = 'end';\n\n\n// plugins and gestures namespaces\nHammer.plugins = Hammer.plugins || {};\nHammer.gestures = Hammer.gestures || {};\n\n\n// if the window events are set...\nHammer.READY = false;\n\n\n/**\n * setup events to detect gestures on the document\n */\nfunction setup() {\n  if(Hammer.READY) {\n    return;\n  }\n\n  // find what eventtypes we add listeners to\n  Event.determineEventTypes();\n\n  // Register all gestures inside Hammer.gestures\n  Utils.each(Hammer.gestures, function(gesture){\n    Detection.register(gesture);\n  });\n\n  // Add touch events on the document\n  Event.onTouch(Hammer.DOCUMENT, EVENT_MOVE, Detection.detect);\n  Event.onTouch(Hammer.DOCUMENT, EVENT_END, Detection.detect);\n\n  // Hammer is ready...!\n  Hammer.READY = true;\n}\n\n\nvar Utils = Hammer.utils = {\n  /**\n   * extend method,\n   * also used for cloning when dest is an empty object\n   * @param   {Object}    dest\n   * @param   {Object}    src\n   * @parm  {Boolean}  merge    do a merge\n   * @returns {Object}    dest\n   */\n  extend: function extend(dest, src, merge) {\n    for(var key in src) {\n      if(dest[key] !== undefined && merge) {\n        continue;\n      }\n      dest[key] = src[key];\n    }\n    return dest;\n  },\n\n\n  /**\n   * for each\n   * @param obj\n   * @param iterator\n   */\n  each: function each(obj, iterator, context) {\n    var i, o;\n    // native forEach on arrays\n    if ('forEach' in obj) {\n      obj.forEach(iterator, context);\n    }\n    // arrays\n    else if(obj.length !== undefined) {\n      for(i=-1; (o=obj[++i]);) {\n        if (iterator.call(context, o, i, obj) === false) {\n          return;\n        }\n      }\n    }\n    // objects\n    else {\n      for(i in obj) {\n        if(obj.hasOwnProperty(i) &&\n            iterator.call(context, obj[i], i, obj) === false) {\n          return;\n        }\n      }\n    }\n  },\n\n\n  /**\n   * find if a string contains the needle\n   * @param   {String}  src\n   * @param   {String}  needle\n   * @returns {Boolean} found\n   */\n  inStr: function inStr(src, needle) {\n    return src.indexOf(needle) > -1;\n  },\n\n\n  /**\n   * find if a node is in the given parent\n   * used for event delegation tricks\n   * @param   {HTMLElement}   node\n   * @param   {HTMLElement}   parent\n   * @returns {boolean}       has_parent\n   */\n  hasParent: function hasParent(node, parent) {\n    while(node) {\n      if(node == parent) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  },\n\n\n  /**\n   * get the center of all the touches\n   * @param   {Array}     touches\n   * @returns {Object}    center pageXY clientXY\n   */\n  getCenter: function getCenter(touches) {\n    var pageX = []\n      , pageY = []\n      , clientX = []\n      , clientY = []\n      , min = Math.min\n      , max = Math.max;\n\n    // no need to loop when only one touch\n    if(touches.length === 1) {\n      return {\n        pageX: touches[0].pageX,\n        pageY: touches[0].pageY,\n        clientX: touches[0].clientX,\n        clientY: touches[0].clientY\n      };\n    }\n\n    Utils.each(touches, function(touch) {\n      pageX.push(touch.pageX);\n      pageY.push(touch.pageY);\n      clientX.push(touch.clientX);\n      clientY.push(touch.clientY);\n    });\n\n    return {\n      pageX: (min.apply(Math, pageX) + max.apply(Math, pageX)) / 2,\n      pageY: (min.apply(Math, pageY) + max.apply(Math, pageY)) / 2,\n      clientX: (min.apply(Math, clientX) + max.apply(Math, clientX)) / 2,\n      clientY: (min.apply(Math, clientY) + max.apply(Math, clientY)) / 2\n    };\n  },\n\n\n  /**\n   * calculate the velocity between two points\n   * @param   {Number}    delta_time\n   * @param   {Number}    delta_x\n   * @param   {Number}    delta_y\n   * @returns {Object}    velocity\n   */\n  getVelocity: function getVelocity(delta_time, delta_x, delta_y) {\n    return {\n      x: Math.abs(delta_x / delta_time) || 0,\n      y: Math.abs(delta_y / delta_time) || 0\n    };\n  },\n\n\n  /**\n   * calculate the angle between two coordinates\n   * @param   {Touch}     touch1\n   * @param   {Touch}     touch2\n   * @returns {Number}    angle\n   */\n  getAngle: function getAngle(touch1, touch2) {\n    var x = touch2.clientX - touch1.clientX\n      , y = touch2.clientY - touch1.clientY;\n    return Math.atan2(y, x) * 180 / Math.PI;\n  },\n\n\n  /**\n   * angle to direction define\n   * @param   {Touch}     touch1\n   * @param   {Touch}     touch2\n   * @returns {String}    direction constant, like DIRECTION_LEFT\n   */\n  getDirection: function getDirection(touch1, touch2) {\n    var x = Math.abs(touch1.clientX - touch2.clientX)\n      , y = Math.abs(touch1.clientY - touch2.clientY);\n    if(x >= y) {\n      return touch1.clientX - touch2.clientX > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return touch1.clientY - touch2.clientY > 0 ? DIRECTION_UP : DIRECTION_DOWN;\n  },\n\n\n  /**\n   * calculate the distance between two touches\n   * @param   {Touch}     touch1\n   * @param   {Touch}     touch2\n   * @returns {Number}    distance\n   */\n  getDistance: function getDistance(touch1, touch2) {\n    var x = touch2.clientX - touch1.clientX\n      , y = touch2.clientY - touch1.clientY;\n    return Math.sqrt((x * x) + (y * y));\n  },\n\n\n  /**\n   * calculate the scale factor between two touchLists (fingers)\n   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n   * @param   {Array}     start\n   * @param   {Array}     end\n   * @returns {Number}    scale\n   */\n  getScale: function getScale(start, end) {\n    // need two fingers...\n    if(start.length >= 2 && end.length >= 2) {\n      return this.getDistance(end[0], end[1]) / this.getDistance(start[0], start[1]);\n    }\n    return 1;\n  },\n\n\n  /**\n   * calculate the rotation degrees between two touchLists (fingers)\n   * @param   {Array}     start\n   * @param   {Array}     end\n   * @returns {Number}    rotation\n   */\n  getRotation: function getRotation(start, end) {\n    // need two fingers\n    if(start.length >= 2 && end.length >= 2) {\n      return this.getAngle(end[1], end[0]) - this.getAngle(start[1], start[0]);\n    }\n    return 0;\n  },\n\n\n  /**\n   * boolean if the direction is vertical\n   * @param    {String}    direction\n   * @returns  {Boolean}   is_vertical\n   */\n  isVertical: function isVertical(direction) {\n    return direction == DIRECTION_UP || direction == DIRECTION_DOWN;\n  },\n\n\n  /**\n   * toggle browser default behavior with css props\n   * @param   {HtmlElement}   element\n   * @param   {Object}        css_props\n   * @param   {Boolean}       toggle\n   */\n  toggleDefaultBehavior: function toggleDefaultBehavior(element, css_props, toggle) {\n    if(!css_props || !element || !element.style) {\n      return;\n    }\n\n    // with css properties for modern browsers\n    Utils.each(['webkit', 'moz', 'Moz', 'ms', 'o', ''], function setStyle(vendor) {\n      Utils.each(css_props, function(value, prop) {\n          // vender prefix at the property\n          if(vendor) {\n            prop = vendor + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n          }\n          // set the style\n          if(prop in element.style) {\n            element.style[prop] = !toggle && value;\n          }\n      });\n    });\n\n    var false_fn = function(){ return false; };\n\n    // also the disable onselectstart\n    if(css_props.userSelect == 'none') {\n      element.onselectstart = !toggle && false_fn;\n    }\n    // and disable ondragstart\n    if(css_props.userDrag == 'none') {\n      element.ondragstart = !toggle && false_fn;\n    }\n  }\n};\n\n\n/**\n * create new hammer instance\n * all methods should return the instance itself, so it is chainable.\n * @param   {HTMLElement}       element\n * @param   {Object}            [options={}]\n * @returns {Hammer.Instance}\n * @constructor\n */\nHammer.Instance = function(element, options) {\n  var self = this;\n\n  // setup HammerJS window events and register all gestures\n  // this also sets up the default options\n  setup();\n\n  this.element = element;\n\n  // start/stop detection option\n  this.enabled = true;\n\n  // merge options\n  this.options = Utils.extend(\n    Utils.extend({}, Hammer.defaults),\n    options || {});\n\n  // add some css to the element to prevent the browser from doing its native behavoir\n  if(this.options.stop_browser_behavior) {\n    Utils.toggleDefaultBehavior(this.element, this.options.stop_browser_behavior, false);\n  }\n\n  // start detection on touchstart\n  this.eventStartHandler = Event.onTouch(element, EVENT_START, function(ev) {\n    if(self.enabled) {\n      Detection.startDetect(self, ev);\n    }\n  });\n\n  // keep a list of user event handlers which needs to be removed when calling 'dispose'\n  this.eventHandlers = [];\n\n  // return instance\n  return this;\n};\n\n\nHammer.Instance.prototype = {\n  /**\n   * bind events to the instance\n   * @param   {String}      gesture\n   * @param   {Function}    handler\n   * @returns {Hammer.Instance}\n   */\n  on: function onEvent(gesture, handler) {\n    var gestures = gesture.split(' ');\n    Utils.each(gestures, function(gesture) {\n      this.element.addEventListener(gesture, handler, false);\n      this.eventHandlers.push({ gesture: gesture, handler: handler });\n    }, this);\n    return this;\n  },\n\n\n  /**\n   * unbind events to the instance\n   * @param   {String}      gesture\n   * @param   {Function}    handler\n   * @returns {Hammer.Instance}\n   */\n  off: function offEvent(gesture, handler) {\n    var gestures = gesture.split(' ')\n      , i, eh;\n    Utils.each(gestures, function(gesture) {\n      this.element.removeEventListener(gesture, handler, false);\n\n      // remove the event handler from the internal list\n      for(i=-1; (eh=this.eventHandlers[++i]);) {\n        if(eh.gesture === gesture && eh.handler === handler) {\n          this.eventHandlers.splice(i, 1);\n        }\n      }\n    }, this);\n    return this;\n  },\n\n\n  /**\n   * trigger gesture event\n   * @param   {String}      gesture\n   * @param   {Object}      [eventData]\n   * @returns {Hammer.Instance}\n   */\n  trigger: function triggerEvent(gesture, eventData) {\n    // optional\n    if(!eventData) {\n      eventData = {};\n    }\n\n    // create DOM event\n    var event = Hammer.DOCUMENT.createEvent('Event');\n    event.initEvent(gesture, true, true);\n    event.gesture = eventData;\n\n    // trigger on the target if it is in the instance element,\n    // this is for event delegation tricks\n    var element = this.element;\n    if(Utils.hasParent(eventData.target, element)) {\n      element = eventData.target;\n    }\n\n    element.dispatchEvent(event);\n    return this;\n  },\n\n\n  /**\n   * enable of disable hammer.js detection\n   * @param   {Boolean}   state\n   * @returns {Hammer.Instance}\n   */\n  enable: function enable(state) {\n    this.enabled = state;\n    return this;\n  },\n\n\n  /**\n   * dispose this hammer instance\n   * @returns {Hammer.Instance}\n   */\n  dispose: function dispose() {\n    var i, eh;\n\n    // undo all changes made by stop_browser_behavior\n    if(this.options.stop_browser_behavior) {\n      Utils.toggleDefaultBehavior(this.element, this.options.stop_browser_behavior, true);\n    }\n\n    // unbind all custom event handlers\n    for(i=-1; (eh=this.eventHandlers[++i]);) {\n      this.element.removeEventListener(eh.gesture, eh.handler, false);\n    }\n    this.eventHandlers = [];\n\n    // unbind the start event listener\n    Event.unbindDom(this.element, Hammer.EVENT_TYPES[EVENT_START], this.eventStartHandler);\n\n    return null;\n  }\n};\n\n\n/**\n * this holds the last move event,\n * used to fix empty touchend issue\n * see the onTouch event for an explanation\n * @type {Object}\n */\nvar last_move_event = null;\n\n/**\n * when the mouse is hold down, this is true\n * @type {Boolean}\n */\nvar should_detect = false;\n\n/**\n * when touch events have been fired, this is true\n * @type {Boolean}\n */\nvar touch_triggered = false;\n\n\nvar Event = Hammer.event = {\n  /**\n   * simple addEventListener\n   * @param   {HTMLElement}   element\n   * @param   {String}        type\n   * @param   {Function}      handler\n   */\n  bindDom: function(element, type, handler) {\n    var types = type.split(' ');\n    Utils.each(types, function(type){\n      element.addEventListener(type, handler, false);\n    });\n  },\n\n\n  /**\n   * simple removeEventListener\n   * @param   {HTMLElement}   element\n   * @param   {String}        type\n   * @param   {Function}      handler\n   */\n  unbindDom: function(element, type, handler) {\n    var types = type.split(' ');\n    Utils.each(types, function(type){\n      element.removeEventListener(type, handler, false);\n    });\n  },\n\n\n  /**\n   * touch events with mouse fallback\n   * @param   {HTMLElement}   element\n   * @param   {String}        eventType        like EVENT_MOVE\n   * @param   {Function}      handler\n   */\n  onTouch: function onTouch(element, eventType, handler) {\n    var self = this;\n\n\n    var bindDomOnTouch = function bindDomOnTouch(ev) {\n      var srcEventType = ev.type.toLowerCase();\n\n      // onmouseup, but when touchend has been fired we do nothing.\n      // this is for touchdevices which also fire a mouseup on touchend\n      if(Utils.inStr(srcEventType, 'mouse') && touch_triggered) {\n        return;\n      }\n\n      // mousebutton must be down or a touch event\n      else if(Utils.inStr(srcEventType, 'touch') ||   // touch events are always on screen\n        Utils.inStr(srcEventType, 'pointerdown') || // pointerevents touch\n        (Utils.inStr(srcEventType, 'mouse') && ev.which === 1)   // mouse is pressed\n        ) {\n        should_detect = true;\n      }\n\n      // mouse isn't pressed\n      else if(Utils.inStr(srcEventType, 'mouse') && !ev.which) {\n        should_detect = false;\n      }\n\n\n      // we are in a touch event, set the touch triggered bool to true,\n      // this for the conflicts that may occur on ios and android\n      if(Utils.inStr(srcEventType, 'touch') || Utils.inStr(srcEventType, 'pointer')) {\n        touch_triggered = true;\n      }\n\n      // count the total touches on the screen\n      var count_touches = 0;\n\n      // when touch has been triggered in this detection session\n      // and we are now handling a mouse event, we stop that to prevent conflicts\n      if(should_detect) {\n        // update pointerevent\n        if(Hammer.HAS_POINTEREVENTS && eventType != EVENT_END) {\n          count_touches = PointerEvent.updatePointer(eventType, ev);\n        }\n        // touch\n        else if(Utils.inStr(srcEventType, 'touch')) {\n          count_touches = ev.touches.length;\n        }\n        // mouse\n        else if(!touch_triggered) {\n          count_touches = Utils.inStr(srcEventType, 'up') ? 0 : 1;\n        }\n\n\n        // if we are in a end event, but when we remove one touch and\n        // we still have enough, set eventType to move\n        if(count_touches > 0 && eventType == EVENT_END) {\n          eventType = EVENT_MOVE;\n        }\n        // no touches, force the end event\n        else if(!count_touches) {\n          eventType = EVENT_END;\n        }\n\n        // store the last move event\n        if(count_touches || last_move_event === null) {\n          last_move_event = ev;\n        }\n\n\n        // trigger the handler\n        handler.call(Detection, self.collectEventData(element, eventType,\n                                  self.getTouchList(last_move_event, eventType),\n                                  ev) );\n\n        // remove pointerevent from list\n        if(Hammer.HAS_POINTEREVENTS && eventType == EVENT_END) {\n          count_touches = PointerEvent.updatePointer(eventType, ev);\n        }\n      }\n\n      // on the end we reset everything\n      if(!count_touches) {\n        last_move_event = null;\n        should_detect = false;\n        touch_triggered = false;\n        PointerEvent.reset();\n      }\n    };\n\n    this.bindDom(element, Hammer.EVENT_TYPES[eventType], bindDomOnTouch);\n\n    // return the bound function to be able to unbind it later\n    return bindDomOnTouch;\n  },\n\n\n  /**\n   * we have different events for each device/browser\n   * determine what we need and set them in the Hammer.EVENT_TYPES constant\n   */\n  determineEventTypes: function determineEventTypes() {\n    // determine the eventtype we want to set\n    var types;\n\n    // pointerEvents magic\n    if(Hammer.HAS_POINTEREVENTS) {\n      types = PointerEvent.getEvents();\n    }\n    // on Android, iOS, blackberry, windows mobile we dont want any mouseevents\n    else if(Hammer.NO_MOUSEEVENTS) {\n      types = [\n        'touchstart',\n        'touchmove',\n        'touchend touchcancel'];\n    }\n    // for non pointer events browsers and mixed browsers,\n    // like chrome on windows8 touch laptop\n    else {\n      types = [\n        'touchstart mousedown',\n        'touchmove mousemove',\n        'touchend touchcancel mouseup'];\n    }\n\n    Hammer.EVENT_TYPES[EVENT_START] = types[0];\n    Hammer.EVENT_TYPES[EVENT_MOVE] = types[1];\n    Hammer.EVENT_TYPES[EVENT_END] = types[2];\n  },\n\n\n  /**\n   * create touchlist depending on the event\n   * @param   {Object}    ev\n   * @param   {String}    eventType   used by the fakemultitouch plugin\n   */\n  getTouchList: function getTouchList(ev/*, eventType*/) {\n    // get the fake pointerEvent touchlist\n    if(Hammer.HAS_POINTEREVENTS) {\n      return PointerEvent.getTouchList();\n    }\n\n    // get the touchlist\n    if(ev.touches) {\n      return ev.touches;\n    }\n\n    // make fake touchlist from mouse position\n    ev.identifier = 1;\n    return [ev];\n  },\n\n\n  /**\n   * collect event data for Hammer js\n   * @param   {HTMLElement}   element\n   * @param   {String}        eventType        like EVENT_MOVE\n   * @param   {Object}        eventData\n   */\n  collectEventData: function collectEventData(element, eventType, touches, ev) {\n    // find out pointerType\n    var pointerType = POINTER_TOUCH;\n    if(Utils.inStr(ev.type, 'mouse') || PointerEvent.matchType(POINTER_MOUSE, ev)) {\n      pointerType = POINTER_MOUSE;\n    }\n\n    return {\n      center     : Utils.getCenter(touches),\n      timeStamp  : Date.now(),\n      target     : ev.target,\n      touches    : touches,\n      eventType  : eventType,\n      pointerType: pointerType,\n      srcEvent   : ev,\n\n      /**\n       * prevent the browser default actions\n       * mostly used to disable scrolling of the browser\n       */\n      preventDefault: function() {\n        var srcEvent = this.srcEvent;\n        srcEvent.preventManipulation && srcEvent.preventManipulation();\n        srcEvent.preventDefault && srcEvent.preventDefault();\n      },\n\n      /**\n       * stop bubbling the event up to its parents\n       */\n      stopPropagation: function() {\n        this.srcEvent.stopPropagation();\n      },\n\n      /**\n       * immediately stop gesture detection\n       * might be useful after a swipe was detected\n       * @return {*}\n       */\n      stopDetect: function() {\n        return Detection.stopDetect();\n      }\n    };\n  }\n};\n\nvar PointerEvent = Hammer.PointerEvent = {\n  /**\n   * holds all pointers\n   * @type {Object}\n   */\n  pointers: {},\n\n  /**\n   * get a list of pointers\n   * @returns {Array}     touchlist\n   */\n  getTouchList: function getTouchList() {\n    var touchlist = [];\n    // we can use forEach since pointerEvents only is in IE10\n    Utils.each(this.pointers, function(pointer){\n      touchlist.push(pointer);\n    });\n\n    return touchlist;\n  },\n\n  /**\n   * update the position of a pointer\n   * @param   {String}   type             EVENT_END\n   * @param   {Object}   pointerEvent\n   */\n  updatePointer: function updatePointer(type, pointerEvent) {\n    if(type == EVENT_END) {\n      delete this.pointers[pointerEvent.pointerId];\n    }\n    else {\n      pointerEvent.identifier = pointerEvent.pointerId;\n      this.pointers[pointerEvent.pointerId] = pointerEvent;\n    }\n\n    // it's save to use Object.keys, since pointerEvents are only in newer browsers\n    return Object.keys(this.pointers).length;\n  },\n\n  /**\n   * check if ev matches pointertype\n   * @param   {String}        pointerType     POINTER_MOUSE\n   * @param   {PointerEvent}  ev\n   */\n  matchType: function matchType(pointerType, ev) {\n    if(!ev.pointerType) {\n      return false;\n    }\n\n    var pt = ev.pointerType\n      , types = {};\n\n    types[POINTER_MOUSE] = (pt === POINTER_MOUSE);\n    types[POINTER_TOUCH] = (pt === POINTER_TOUCH);\n    types[POINTER_PEN] = (pt === POINTER_PEN);\n    return types[pointerType];\n  },\n\n\n  /**\n   * get events\n   */\n  getEvents: function getEvents() {\n    return [\n      'pointerdown MSPointerDown',\n      'pointermove MSPointerMove',\n      'pointerup pointercancel MSPointerUp MSPointerCancel'\n    ];\n  },\n\n  /**\n   * reset the list\n   */\n  reset: function resetList() {\n    this.pointers = {};\n  }\n};\n\n\nvar Detection = Hammer.detection = {\n  // contains all registred Hammer.gestures in the correct order\n  gestures: [],\n\n  // data of the current Hammer.gesture detection session\n  current : null,\n\n  // the previous Hammer.gesture session data\n  // is a full clone of the previous gesture.current object\n  previous: null,\n\n  // when this becomes true, no gestures are fired\n  stopped : false,\n\n\n  /**\n   * start Hammer.gesture detection\n   * @param   {Hammer.Instance}   inst\n   * @param   {Object}            eventData\n   */\n  startDetect: function startDetect(inst, eventData) {\n    // already busy with a Hammer.gesture detection on an element\n    if(this.current) {\n      return;\n    }\n\n    this.stopped = false;\n\n    // holds current session\n    this.current = {\n      inst              : inst, // reference to HammerInstance we're working for\n      startEvent        : Utils.extend({}, eventData), // start eventData for distances, timing etc\n      lastEvent         : false, // last eventData\n      lastVelocityEvent : false, // last eventData for velocity.\n      velocity          : false, // current velocity\n      name              : '' // current gesture we're in/detected, can be 'tap', 'hold' etc\n    };\n\n    this.detect(eventData);\n  },\n\n\n  /**\n   * Hammer.gesture detection\n   * @param   {Object}    eventData\n   */\n  detect: function detect(eventData) {\n    if(!this.current || this.stopped) {\n      return;\n    }\n\n    // extend event data with calculations about scale, distance etc\n    eventData = this.extendEventData(eventData);\n\n    // hammer instance and instance options\n    var inst = this.current.inst,\n        inst_options = inst.options;\n\n    // call Hammer.gesture handlers\n    Utils.each(this.gestures, function triggerGesture(gesture) {\n      // only when the instance options have enabled this gesture\n      if(!this.stopped && inst_options[gesture.name] !== false && inst.enabled !== false ) {\n        // if a handler returns false, we stop with the detection\n        if(gesture.handler.call(gesture, eventData, inst) === false) {\n          this.stopDetect();\n          return false;\n        }\n      }\n    }, this);\n\n    // store as previous event event\n    if(this.current) {\n      this.current.lastEvent = eventData;\n    }\n\n    // end event, but not the last touch, so dont stop\n    if(eventData.eventType == EVENT_END && !eventData.touches.length - 1) {\n      this.stopDetect();\n    }\n\n    return eventData;\n  },\n\n\n  /**\n   * clear the Hammer.gesture vars\n   * this is called on endDetect, but can also be used when a final Hammer.gesture has been detected\n   * to stop other Hammer.gestures from being fired\n   */\n  stopDetect: function stopDetect() {\n    // clone current data to the store as the previous gesture\n    // used for the double tap gesture, since this is an other gesture detect session\n    this.previous = Utils.extend({}, this.current);\n\n    // reset the current\n    this.current = null;\n\n    // stopped!\n    this.stopped = true;\n  },\n\n\n  /**\n   * calculate velocity\n   * @param   {Object}  ev\n   * @param   {Number}  delta_time\n   * @param   {Number}  delta_x\n   * @param   {Number}  delta_y\n   */\n  getVelocityData: function getVelocityData(ev, delta_time, delta_x, delta_y) {\n    var cur = this.current\n      , velocityEv = cur.lastVelocityEvent\n      , velocity = cur.velocity;\n\n    // calculate velocity every x ms\n    if (velocityEv && ev.timeStamp - velocityEv.timeStamp > Hammer.UPDATE_VELOCITY_INTERVAL) {\n      velocity = Utils.getVelocity(ev.timeStamp - velocityEv.timeStamp,\n                                   ev.center.clientX - velocityEv.center.clientX,\n                                  ev.center.clientY - velocityEv.center.clientY);\n      cur.lastVelocityEvent = ev;\n    }\n    else if(!cur.velocity) {\n      velocity = Utils.getVelocity(delta_time, delta_x, delta_y);\n      cur.lastVelocityEvent = ev;\n    }\n\n    cur.velocity = velocity;\n\n    ev.velocityX = velocity.x;\n    ev.velocityY = velocity.y;\n  },\n\n\n  /**\n   * calculate interim angle and direction\n   * @param   {Object}  ev\n   */\n  getInterimData: function getInterimData(ev) {\n    var lastEvent = this.current.lastEvent\n      , angle\n      , direction;\n\n    // end events (e.g. dragend) don't have useful values for interimDirection & interimAngle\n    // because the previous event has exactly the same coordinates\n    // so for end events, take the previous values of interimDirection & interimAngle\n    // instead of recalculating them and getting a spurious '0'\n    if(ev.eventType == EVENT_END) {\n      angle = lastEvent && lastEvent.interimAngle;\n      direction = lastEvent && lastEvent.interimDirection;\n    }\n    else {\n      angle = lastEvent && Utils.getAngle(lastEvent.center, ev.center);\n      direction = lastEvent && Utils.getDirection(lastEvent.center, ev.center);\n    }\n\n    ev.interimAngle = angle;\n    ev.interimDirection = direction;\n  },\n\n\n  /**\n   * extend eventData for Hammer.gestures\n   * @param   {Object}   evData\n   * @returns {Object}   evData\n   */\n  extendEventData: function extendEventData(ev) {\n    var cur = this.current\n      , startEv = cur.startEvent;\n\n    // if the touches change, set the new touches over the startEvent touches\n    // this because touchevents don't have all the touches on touchstart, or the\n    // user must place his fingers at the EXACT same time on the screen, which is not realistic\n    // but, sometimes it happens that both fingers are touching at the EXACT same time\n    if(ev.touches.length != startEv.touches.length || ev.touches === startEv.touches) {\n      // extend 1 level deep to get the touchlist with the touch objects\n      startEv.touches = [];\n      Utils.each(ev.touches, function(touch) {\n        startEv.touches.push(Utils.extend({}, touch));\n      });\n    }\n\n    var delta_time = ev.timeStamp - startEv.timeStamp\n      , delta_x = ev.center.clientX - startEv.center.clientX\n      , delta_y = ev.center.clientY - startEv.center.clientY;\n\n    this.getVelocityData(ev, delta_time, delta_x, delta_y);\n    this.getInterimData(ev);\n\n    Utils.extend(ev, {\n      startEvent: startEv,\n\n      deltaTime : delta_time,\n      deltaX    : delta_x,\n      deltaY    : delta_y,\n\n      distance  : Utils.getDistance(startEv.center, ev.center),\n      angle     : Utils.getAngle(startEv.center, ev.center),\n      direction : Utils.getDirection(startEv.center, ev.center),\n\n      scale     : Utils.getScale(startEv.touches, ev.touches),\n      rotation  : Utils.getRotation(startEv.touches, ev.touches)\n    });\n\n    return ev;\n  },\n\n\n  /**\n   * register new gesture\n   * @param   {Object}    gesture object, see gestures.js for documentation\n   * @returns {Array}     gestures\n   */\n  register: function register(gesture) {\n    // add an enable gesture options if there is no given\n    var options = gesture.defaults || {};\n    if(options[gesture.name] === undefined) {\n      options[gesture.name] = true;\n    }\n\n    // extend Hammer default options with the Hammer.gesture options\n    Utils.extend(Hammer.defaults, options, true);\n\n    // set its index\n    gesture.index = gesture.index || 1000;\n\n    // add Hammer.gesture to the list\n    this.gestures.push(gesture);\n\n    // sort the list by index\n    this.gestures.sort(function(a, b) {\n      if(a.index < b.index) { return -1; }\n      if(a.index > b.index) { return 1; }\n      return 0;\n    });\n\n    return this.gestures;\n  }\n};\n\n\n/**\n * Drag\n * Move with x fingers (default 1) around on the page. Blocking the scrolling when\n * moving left and right is a good practice. When all the drag events are blocking\n * you disable scrolling on that area.\n * @events  drag, drapleft, dragright, dragup, dragdown\n */\nHammer.gestures.Drag = {\n  name     : 'drag',\n  index    : 50,\n  defaults : {\n    drag_min_distance            : 10,\n\n    // Set correct_for_drag_min_distance to true to make the starting point of the drag\n    // be calculated from where the drag was triggered, not from where the touch started.\n    // Useful to avoid a jerk-starting drag, which can make fine-adjustments\n    // through dragging difficult, and be visually unappealing.\n    correct_for_drag_min_distance: true,\n\n    // set 0 for unlimited, but this can conflict with transform\n    drag_max_touches             : 1,\n\n    // prevent default browser behavior when dragging occurs\n    // be careful with it, it makes the element a blocking element\n    // when you are using the drag gesture, it is a good practice to set this true\n    drag_block_horizontal        : false,\n    drag_block_vertical          : false,\n\n    // drag_lock_to_axis keeps the drag gesture on the axis that it started on,\n    // It disallows vertical directions if the initial direction was horizontal, and vice versa.\n    drag_lock_to_axis            : false,\n\n    // drag lock only kicks in when distance > drag_lock_min_distance\n    // This way, locking occurs only when the distance has become large enough to reliably determine the direction\n    drag_lock_min_distance       : 25\n  },\n\n  triggered: false,\n  handler  : function dragGesture(ev, inst) {\n    var cur = Detection.current;\n\n    // current gesture isnt drag, but dragged is true\n    // this means an other gesture is busy. now call dragend\n    if(cur.name != this.name && this.triggered) {\n      inst.trigger(this.name + 'end', ev);\n      this.triggered = false;\n      return;\n    }\n\n    // max touches\n    if(inst.options.drag_max_touches > 0 &&\n      ev.touches.length > inst.options.drag_max_touches) {\n      return;\n    }\n\n    switch(ev.eventType) {\n      case EVENT_START:\n        this.triggered = false;\n        break;\n\n      case EVENT_MOVE:\n        // when the distance we moved is too small we skip this gesture\n        // or we can be already in dragging\n        if(ev.distance < inst.options.drag_min_distance &&\n          cur.name != this.name) {\n          return;\n        }\n\n        var startCenter = cur.startEvent.center;\n\n        // we are dragging!\n        if(cur.name != this.name) {\n          cur.name = this.name;\n          if(inst.options.correct_for_drag_min_distance && ev.distance > 0) {\n            // When a drag is triggered, set the event center to drag_min_distance pixels from the original event center.\n            // Without this correction, the dragged distance would jumpstart at drag_min_distance pixels instead of at 0.\n            // It might be useful to save the original start point somewhere\n            var factor = Math.abs(inst.options.drag_min_distance / ev.distance);\n            startCenter.pageX += ev.deltaX * factor;\n            startCenter.pageY += ev.deltaY * factor;\n            startCenter.clientX += ev.deltaX * factor;\n            startCenter.clientY += ev.deltaY * factor;\n\n            // recalculate event data using new start point\n            ev = Detection.extendEventData(ev);\n          }\n        }\n\n        // lock drag to axis?\n        if(cur.lastEvent.drag_locked_to_axis ||\n            ( inst.options.drag_lock_to_axis &&\n              inst.options.drag_lock_min_distance <= ev.distance\n            )) {\n          ev.drag_locked_to_axis = true;\n        }\n        var last_direction = cur.lastEvent.direction;\n        if(ev.drag_locked_to_axis && last_direction !== ev.direction) {\n          // keep direction on the axis that the drag gesture started on\n          if(Utils.isVertical(last_direction)) {\n            ev.direction = (ev.deltaY < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n          }\n          else {\n            ev.direction = (ev.deltaX < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n          }\n        }\n\n        // first time, trigger dragstart event\n        if(!this.triggered) {\n          inst.trigger(this.name + 'start', ev);\n          this.triggered = true;\n        }\n\n        // trigger events\n        inst.trigger(this.name, ev);\n        inst.trigger(this.name + ev.direction, ev);\n\n        var is_vertical = Utils.isVertical(ev.direction);\n\n        // block the browser events\n        if((inst.options.drag_block_vertical && is_vertical) ||\n          (inst.options.drag_block_horizontal && !is_vertical)) {\n          ev.preventDefault();\n        }\n        break;\n\n      case EVENT_END:\n        // trigger dragend\n        if(this.triggered) {\n          inst.trigger(this.name + 'end', ev);\n        }\n\n        this.triggered = false;\n        break;\n    }\n  }\n};\n\n/**\n * Hold\n * Touch stays at the same place for x time\n * @events  hold\n */\nHammer.gestures.Hold = {\n  name    : 'hold',\n  index   : 10,\n  defaults: {\n    hold_timeout  : 500,\n    hold_threshold: 2\n  },\n  timer   : null,\n\n  handler : function holdGesture(ev, inst) {\n    switch(ev.eventType) {\n      case EVENT_START:\n        // clear any running timers\n        clearTimeout(this.timer);\n\n        // set the gesture so we can check in the timeout if it still is\n        Detection.current.name = this.name;\n\n        // set timer and if after the timeout it still is hold,\n        // we trigger the hold event\n        this.timer = setTimeout(function() {\n          if(Detection.current.name == 'hold') {\n            inst.trigger('hold', ev);\n          }\n        }, inst.options.hold_timeout);\n        break;\n\n      // when you move or end we clear the timer\n      case EVENT_MOVE:\n        if(ev.distance > inst.options.hold_threshold) {\n          clearTimeout(this.timer);\n        }\n        break;\n\n      case EVENT_END:\n        clearTimeout(this.timer);\n        break;\n    }\n  }\n};\n\n/**\n * Release\n * Called as last, tells the user has released the screen\n * @events  release\n */\nHammer.gestures.Release = {\n  name   : 'release',\n  index  : Infinity,\n  handler: function releaseGesture(ev, inst) {\n    if(ev.eventType == EVENT_END) {\n      inst.trigger(this.name, ev);\n    }\n  }\n};\n\n/**\n * Swipe\n * triggers swipe events when the end velocity is above the threshold\n * for best usage, set prevent_default (on the drag gesture) to true\n * @events  swipe, swipeleft, swiperight, swipeup, swipedown\n */\nHammer.gestures.Swipe = {\n  name    : 'swipe',\n  index   : 40,\n  defaults: {\n    swipe_min_touches: 1,\n    swipe_max_touches: 1,\n    swipe_velocity   : 0.7\n  },\n  handler : function swipeGesture(ev, inst) {\n    if(ev.eventType == EVENT_END) {\n      // max touches\n      if(ev.touches.length < inst.options.swipe_min_touches ||\n        ev.touches.length > inst.options.swipe_max_touches) {\n        return;\n      }\n\n      // when the distance we moved is too small we skip this gesture\n      // or we can be already in dragging\n      if(ev.velocityX > inst.options.swipe_velocity ||\n        ev.velocityY > inst.options.swipe_velocity) {\n        // trigger swipe events\n        inst.trigger(this.name, ev);\n        inst.trigger(this.name + ev.direction, ev);\n      }\n    }\n  }\n};\n\n/**\n * Tap/DoubleTap\n * Quick touch at a place or double at the same place\n * @events  tap, doubletap\n */\nHammer.gestures.Tap = {\n  name    : 'tap',\n  index   : 100,\n  defaults: {\n    tap_max_touchtime : 250,\n    tap_max_distance  : 10,\n    tap_always        : true,\n    doubletap_distance: 20,\n    doubletap_interval: 300\n  },\n\n  has_moved: false,\n\n  handler : function tapGesture(ev, inst) {\n    var prev, since_prev, did_doubletap;\n\n    // reset moved state\n    if(ev.eventType == EVENT_START) {\n      this.has_moved = false;\n    }\n\n    // Track the distance we've moved. If it's above the max ONCE, remember that (fixes #406).\n    else if(ev.eventType == EVENT_MOVE && !this.moved) {\n      this.has_moved = (ev.distance > inst.options.tap_max_distance);\n    }\n\n    else if(ev.eventType == EVENT_END &&\n        ev.srcEvent.type != 'touchcancel' &&\n        ev.deltaTime < inst.options.tap_max_touchtime && !this.has_moved) {\n\n      // previous gesture, for the double tap since these are two different gesture detections\n      prev = Detection.previous;\n      since_prev = prev && prev.lastEvent && ev.timeStamp - prev.lastEvent.timeStamp;\n      did_doubletap = false;\n\n      // check if double tap\n      if(prev && prev.name == 'tap' &&\n          (since_prev && since_prev < inst.options.doubletap_interval) &&\n          ev.distance < inst.options.doubletap_distance) {\n        inst.trigger('doubletap', ev);\n        did_doubletap = true;\n      }\n\n      // do a single tap\n      if(!did_doubletap || inst.options.tap_always) {\n        Detection.current.name = 'tap';\n        inst.trigger(Detection.current.name, ev);\n      }\n    }\n  }\n};\n\n/**\n * Touch\n * Called as first, tells the user has touched the screen\n * @events  touch\n */\nHammer.gestures.Touch = {\n  name    : 'touch',\n  index   : -Infinity,\n  defaults: {\n    // call preventDefault at touchstart, and makes the element blocking by\n    // disabling the scrolling of the page, but it improves gestures like\n    // transforming and dragging.\n    // be careful with using this, it can be very annoying for users to be stuck\n    // on the page\n    prevent_default    : false,\n\n    // disable mouse events, so only touch (or pen!) input triggers events\n    prevent_mouseevents: false\n  },\n  handler : function touchGesture(ev, inst) {\n    if(inst.options.prevent_mouseevents &&\n        ev.pointerType == POINTER_MOUSE) {\n      ev.stopDetect();\n      return;\n    }\n\n    if(inst.options.prevent_default) {\n      ev.preventDefault();\n    }\n\n    if(ev.eventType == EVENT_START) {\n      inst.trigger(this.name, ev);\n    }\n  }\n};\n\n\n/**\n * Transform\n * User want to scale or rotate with 2 fingers\n * @events  transform, pinch, pinchin, pinchout, rotate\n */\nHammer.gestures.Transform = {\n  name     : 'transform',\n  index    : 45,\n  defaults : {\n    // factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1\n    transform_min_scale      : 0.01,\n    // rotation in degrees\n    transform_min_rotation   : 1,\n    // prevent default browser behavior when two touches are on the screen\n    // but it makes the element a blocking element\n    // when you are using the transform gesture, it is a good practice to set this true\n    transform_always_block   : false,\n    // ensures that all touches occurred within the instance element\n    transform_within_instance: false\n  },\n\n  triggered: false,\n\n  handler  : function transformGesture(ev, inst) {\n    // current gesture isnt drag, but dragged is true\n    // this means an other gesture is busy. now call dragend\n    if(Detection.current.name != this.name && this.triggered) {\n      inst.trigger(this.name + 'end', ev);\n      this.triggered = false;\n      return;\n    }\n\n    // at least multitouch\n    if(ev.touches.length < 2) {\n      return;\n    }\n\n    // prevent default when two fingers are on the screen\n    if(inst.options.transform_always_block) {\n      ev.preventDefault();\n    }\n\n    // check if all touches occurred within the instance element\n    if(inst.options.transform_within_instance) {\n      for(var i=-1; ev.touches[++i];) {\n        if(!Utils.hasParent(ev.touches[i].target, inst.element)) {\n          return;\n        }\n      }\n    }\n\n    switch(ev.eventType) {\n      case EVENT_START:\n        this.triggered = false;\n        break;\n\n      case EVENT_MOVE:\n        var scale_threshold = Math.abs(1 - ev.scale);\n        var rotation_threshold = Math.abs(ev.rotation);\n\n        // when the distance we moved is too small we skip this gesture\n        // or we can be already in dragging\n        if(scale_threshold < inst.options.transform_min_scale &&\n          rotation_threshold < inst.options.transform_min_rotation) {\n          return;\n        }\n\n        // we are transforming!\n        Detection.current.name = this.name;\n\n        // first time, trigger dragstart event\n        if(!this.triggered) {\n          inst.trigger(this.name + 'start', ev);\n          this.triggered = true;\n        }\n\n        inst.trigger(this.name, ev); // basic transform event\n\n        // trigger rotate event\n        if(rotation_threshold > inst.options.transform_min_rotation) {\n          inst.trigger('rotate', ev);\n        }\n\n        // trigger pinch event\n        if(scale_threshold > inst.options.transform_min_scale) {\n          inst.trigger('pinch', ev);\n          inst.trigger('pinch' + (ev.scale<1 ? 'in' : 'out'), ev);\n        }\n        break;\n\n      case EVENT_END:\n        // trigger dragend\n        if(this.triggered) {\n          inst.trigger(this.name + 'end', ev);\n        }\n\n        this.triggered = false;\n        break;\n    }\n  }\n};\n\n// AMD export\nif(typeof define == 'function' && define.amd) {\n  define(function(){\n    return Hammer;\n  });\n}\n// commonjs export\nelse if(typeof module == 'object' && module.exports) {\n  module.exports = Hammer;\n}\n// browser export\nelse {\n  window.Hammer = Hammer;\n}\n\n})(window);","'use strict';\n\nvar EventEmitter = require('../bower_components/eventEmitter/EventEmitter.js');\nvar hammer = require('../bower_components/hammerjs/hammer.js');\n\nvar isTouchDevice = 'ontouchstart' in document.documentElement;\n\nvar utils = require('./utils.js'),\n\ttween = require('../bower_components/easy-tween/dist/easyTween.js');\n\nvar Surface = module.exports = function(container){\n\tthis.container = container;\n\tthis.element = document.createElement('div');\n\tthis.element.style.position = 'absolute';\n\tcontainer.appendChild(this.element);\n\n\tthis.refit();\n\tthis.emitter = new EventEmitter();\n\n\tthis.horizontalPosition = 0;\n\tthis.verticalPosition = 0;\n\t\n\tthis.horizontalVelocity = 0;\n\tthis.verticalVelocity = 0;\n\n\tthis.cssTransitions = {};\n\tthis.cssFilters = {};\n\tthis.cssTransforms = {};\n\n\tthis.pointerEventHandler = this.pointerEventHandler.bind(this);\n\tthis.dragEventHandler = this.dragEventHandler.bind(this);\n\tthis.transformStep = this.transformStep.bind(this);\n};\n\nSurface.create = function(container){\n\tvar surface = new Surface(container);\n\n\treturn Surface.getApi(surface);\n};\n\nSurface.getApi = function(surface){\n\tvar api = {};\n\n\tapi.on = surface.emitter.on.bind(surface.emitter);\n\tapi.removeListener = surface.emitter.removeListener.bind(surface.emitter);\n\n\tapi.refit = surface.refit.bind(surface);\n\tapi.element = surface.element;\n\tapi.container = surface.container;\n\n\tapi.css = surface.setCssStyle.bind(surface);\n\tapi.cssTransform = surface.setCssTransform.bind(surface);\n\tapi.cssFilter = surface.setCssFilter.bind(surface);\n\tapi.cssTransition = surface.setCssTransition.bind(surface);\n\n\tapi.speed = surface.setVelocityScalar.bind(surface);\n\tapi.horizontalSpeed = surface.setHorizontalVelocityScalar.bind(surface);\n\tapi.verticalSpeed = surface.setVerticalVelocityScalar.bind(surface);\n\n\tapi.horizontalWind = surface.setBaseHorizontalVelocity.bind(surface);\n\tapi.verticalWind = surface.setBaseVerticalVelocity.bind(surface);\n\t\n\tObject.defineProperty(api, 'speedGradient', {\n\t\tget: function(){\n\t\t\treturn (surface.horizontalVelocityGradient === surface.verticalVelocityGradient)? \n\t\t\t\t\t\tsurface.horizontalVelocityGradient : \n\t\t\t\t\t\tvoid 0;\n\t\t},\n\t\tset: function(value){\n\t\t\tsurface.horizontalVelocityGradient = value;\n\t\t\tsurface.verticalVelocityGradient = value;\n\t\t}\n\t});\n\n\tObject.defineProperty(api, 'horizontalVelocityGradient', {\n\t\tget: function(){ return surface.horizontalVelocityGradient;},\n\t\tset: function(value){ surface.horizontalVelocityGradient = value;}\n\t});\n\n\tObject.defineProperty(api, 'verticalVelocityGradient', {\n\t\tget: function(){ return surface.verticalVelocityGradient;},\n\t\tset: function(value){ surface.verticalVelocityGradient = value;}\n\t});\n\n\tObject.defineProperty(api, 'width', {\n\t\tget: function(){return surface.width;}\n\t});\n\n\tObject.defineProperty(api, 'height', {\n\t\tget: function(){return surface.height;}\n\t});\n\n\tObject.defineProperty(api, 'top', {\n\t\tget: function(){return surface.top;}\n\t});\n\n\tObject.defineProperty(api, 'left', {\n\t\tget: function(){return surface.left;}\n\t});\n\n\treturn api;\n};\n\nSurface.prototype.horizontalVelocityScalar = 0;\nSurface.prototype.verticalVelocityScalar = 0;\n\nSurface.prototype.baseHorizontalVelocity = 0;\nSurface.prototype.baseVerticalVelocity = 0;\n\nSurface.prototype.msPerStep = 16; // Milliseconds per step\n\n// These functions take current position relative to the center and return a number between -1 and 1\nSurface.prototype.horizontalVelocityGradient = tween.easing.quadraticIn;\nSurface.prototype.verticalVelocityGradient = tween.easing.quadraticIn;\n\nSurface.prototype.pointerTrackingEvents = ['mousemove'];//, 'touchstart', 'touchend', 'touchmove'];\n\nSurface.prototype.refit = function(){\n\tvar rect = this.container.getBoundingClientRect();\n\n\tthis.width = rect.width;\n\tthis.halfWidth = this.width / 2;\n\n\tthis.height = rect.height;\n\tthis.halfHeight = this.height / 2;\n\n\tthis.top = rect.top;\n\tthis.left = rect.left;\n};\n\nSurface.prototype.startTransformLoop = function(){\n\tif(this.transforming) return;\n\n\tthis.transforming = true;\n\tthis.lastStepTime = Date.now();\n\tthis.animationRequestId = requestAnimationFrame(this.transformStep);\n\tthis.attachPointerListeners();\n\tthis.emitter.emit('move start');\n};\n\nSurface.prototype.stopTransformLoop = function(){\n\tif(!this.transforming) return;\n\n\tthis.transforming = false;\n\tcancelAnimationFrame(this.animationRequestId);\n\tthis.emitter.emit('move stop');\n};\n\nSurface.prototype.transformStep = function(){\n\tvar currentTime = Date.now(),\n\t\tlagScalar = (currentTime - this.lastStepTime) / this.msPerStep;\n\t\n\tthis.lastHorizontalDisplacement = lagScalar * (this.baseHorizontalVelocity + \n\t\t(this.horizontalVelocity * this.horizontalVelocityScalar));\n\tthis.lastVerticalDisplacement = lagScalar * (this.baseVerticalVelocity + \n\t\t(this.verticalVelocity * this.verticalVelocityScalar));\n\tthis.lastStepTime = currentTime;\n\t\n\tif(this.lastHorizontalDisplacement || this.lastVerticalDisplacement){\n\t\tthis.horizontalPosition += this.lastHorizontalDisplacement;\n\t\tthis.verticalPosition += this.lastVerticalDisplacement;\n\t\tthis.setCssTransform('translate', this.horizontalPosition + 'px, ' + this.verticalPosition + 'px');\n\t\tthis.animationRequestId = requestAnimationFrame(this.transformStep);\n\t} else if(this.trackingPointer || this.baseHorizontalVelocity || this.baseVerticalVelocity){\n\t\tthis.animationRequestId = requestAnimationFrame(this.transformStep);\n\t}\n};\n\nSurface.prototype.setBaseHorizontalVelocity = function(target, duration, easingFunc){\n\tif(target === void 0) return this.baseHorizontalVelocity;\n\n\tif(this.horizontalWindTween) this.horizontalWindTween.pause();\n\n\tif(duration){\n\t\tduration *= 1000; // Tweening occurs in milliseconds\n\t\teasingFunc = easingFunc || (this.baseHorizontalVelocity < target)? \n\t\t\ttween.easing.quadraticIn : tween.easing.quadraticOut;\n\t\tthis.horizontalWindTween = tween(easingFunc, this, 'baseHorizontalVelocity', target, duration);\n\t} else {\n\t\tthis.baseHorizontalVelocity = target;\n\t}\n};\n\nSurface.prototype.setBaseVerticalVelocity = function(target, duration, easingFunc){\n\tif(target === void 0) return this.baseVerticalVelocity;\n\t\n\tif(this.verticalWindTween) this.verticalWindTween.pause();\n\n\tif(duration){\n\t\tduration *= 1000; // Tweening occurs in milliseconds\n\t\teasingFunc = easingFunc || (this.baseVerticalVelocity < target)? \n\t\t\ttween.easing.quadraticIn : tween.easing.quadraticOut;\n\t\tthis.verticalWindTween = tween(easingFunc, this, 'baseVerticalVelocity', target, duration);\n\t} else {\n\t\tthis.baseVerticalVelocity = target;\n\t}\n};\n\nSurface.prototype.setVelocityScalar = function(target, duration, easingFunc, callback){\n\tif(target === void 0){\n\t\tif(this.horizontalVelocityScalar === this.verticalVelocityScalar){\n\t\t\treturn this.horizontalVelocityScalar;\n\t\t}\n\n\t\treturn void 0;\n\t}\n\t\n\tthis.setHorizontalVelocityScalar(target, duration, easingFunc, callback);\n\tthis.setVerticalVelocityScalar(target, duration, easingFunc);\n};\n\nSurface.prototype.setHorizontalVelocityScalar = function(target, duration, easingFunc, callback){\n\tif(target === void 0) return this.horizontalVelocityScalar;\n\n\tif(this.horizontalSpeedTween) this.horizontalSpeedTween.pause();\n\n\tif(duration){\n\t\tduration *= 1000; // Tweening occurs in milliseconds\n\t\teasingFunc = easingFunc || (this.horizontalVelocityScalar < target)? \n\t\t\ttween.easing.quadraticIn : tween.easing.quadraticOut;\n\t\tthis.horizontalSpeedTween = tween(easingFunc, this, 'horizontalVelocityScalar', target, duration, callback);\n\t} else {\n\t\tthis.horizontalVelocityScalar = target;\n\t}\n};\n\nSurface.prototype.setVerticalVelocityScalar = function(target, duration, easingFunc, callback){\n\tif(target === void 0) return this.verticalVelocityScalar;\n\n\tif(this.verticalSpeedTween) this.verticalSpeedTween.pause();\n\n\tif(duration){\n\t\tduration *= 1000; // Tweening occurs in milliseconds\n\t\teasingFunc = easingFunc || (this.verticalVelocityScalar < target)? \n\t\t\ttween.easing.quadraticIn : tween.easing.quadraticOut;\n\t\tthis.verticalSpeedTween = tween(easingFunc, this, 'verticalVelocityScalar', target, duration, callback);\n\t} else {\n\t\tthis.verticalVelocityScalar = target;\n\t}\n};\n\nfunction preventDefault(e){\n\te.preventDefault();\n}\n\nSurface.prototype.attachPointerListeners = function(){\n\tif(this.trackingPointer) return;\n\tthis.trackingPointer = true;\n\n\tif(isTouchDevice){\n\t\thammer(this.container).on('drag', this.dragEventHandler);\t\n\t\tthis.container.addEventListener('touchmove', preventDefault);\n\t} else {\n\t\tthis.container.addEventListener('mousemove', this.pointerEventHandler);\n\t}\n\t\n\tthis.emitter.emit('pointer tracking start');\n};\n\nSurface.prototype.detachPointerListeners = function(){\n\tif(!this.trackingPointer) return;\n\tthis.trackingPointer = false;\n\t\n\tif(isTouchDevice){\n\t\thammer(this.container).off('drag', this.dragEventHandler);\t\n\t\tthis.container.removeEventListener('touchmove', preventDefault);\n\t} else {\n\t\tthis.container.removeEventListener('mousemove', this.pointerEventHandler);\n\t}\n\t\n\n\tthis.emitter.emit('pointer tracking stop');\n};\n\nSurface.prototype.dragEventHandler = function(e){\n\tthis.horizontalVelocity = e.gesture.velocityX;\n\tthis.verticalVelocity = e.gesture.velocityY;\n\t\n\tif(this.horizontalVelocity < 0.1) this.horizontalVelocity = 0;\n\tif(this.verticalVelocity < 0.1) this.verticalVelocity = 0;\n\n\tif(this.horizontalVelocity > 1) this.horizontalVelocity = 1;\n\tif(this.verticalVelocity > 1) this.verticalVelocity = 1;\n\n\tif(e.gesture.deltaX < 0) this.horizontalVelocity *= -1;\n\tif(e.gesture.deltaY < 0) this.verticalVelocity *= -1;\n\n};\n\n// This updates the x and y speed multipliers based on the pointers relative position to the\n// center of the container element\nSurface.prototype.pointerEventHandler = function(e){\n\t// If touch event, find first touch\n\tvar pointer = (e.changedTouches && e.changedTouches[0] || e),\n\t\tx = pointer.clientX - this.left,\n\t\ty = pointer.clientY - this.top;\n\n\tthis.horizontalVelocity = this.horizontalVelocityGradient(\n\t\tx - this.halfWidth, \n\t\t0, \n\t\t(x > this.halfWidth? -1 : 1), \n\t\tthis.halfWidth\n\t);\n\tthis.verticalVelocity = this.verticalVelocityGradient(\n\t\ty - this.halfHeight, \n\t\t0, \n\t\t(y > this.halfHeight? -1 : 1), \n\t\tthis.halfHeight\n\t);\n};\n\nSurface.prototype.setCssStyle = function(name, value, duration){\n\tif(value === void 0) return this.element.style[name];\n\n\tif(duration !== void 0) this.setCssTransition(name, duration + 's');\n\t\n\tthis.element.style[name] = value;\n};\n\nSurface.prototype.setCssTransform = function(name, value){\n\tif(value === void 0) return this.cssTransforms[name];\n\n\tthis.cssTransforms[name] = value;\n\tthis.updateMultiAttributeStyle(utils.transformAttribute, this.cssTransforms);\n};\n\nSurface.prototype.setCssFilter = function(name, value, duration){\n\tif(value === void 0) return this.cssFilters[name];\n\t\n\tif(duration !== void 0) this.setCssTransition(utils.cssFilterAttribute, duration + 's');\n\t\n\tthis.cssFilters[name] = value;\n\tthis.updateMultiAttributeStyle(utils.filterAttribute, this.cssFilters);\n};\n\nSurface.prototype.setCssTransition = function(name, value){\n\tif(value === void 0) return this.cssTransitions[name];\n\t\n\tthis.cssTransitions[name] = value;\n\tthis.updateMultiAttributeStyle(utils.transitionAttribute, this.cssTransitions, true);\n};\n\nSurface.prototype.updateMultiAttributeStyle = function(styleName, attributes, withComma){\n\tvar name,\n\t\tstyle = '',\n\t\tfirst = true;\n\n\tfor(name in attributes){\n\t\tif(attributes.hasOwnProperty(name)){\n\t\t\tif(first) first = false;\n\t\t\telse style += withComma?', ': ' ';\n\n\t\t\tif(withComma){\n\t\t\t\tstyle += name + ' ' + attributes[name];\n\t\t\t} else {\n\t\t\t\tstyle += name + '(' + attributes[name] + ')';\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.element.style[styleName] = style;\n};\n","'use strict';\n\nvar noop = exports.noop = function(){};\n\nexports.requestFullscreen = document.documentElement.requestFullscreen ||\n\t\t\t\t\t\t\tdocument.documentElement.mozRequestFullScreen ||\n\t\t\t\t\t\t\tdocument.documentElement.webkitRequestFullscreen ||\n\t\t\t\t\t\t\tnoop;\n\nvar bodyStyle = document.body.style;\nexports.transformAttribute = \t(bodyStyle.msTransform !== void 0) && 'msTransform' ||\n\t\t\t\t\t\t\t\t(bodyStyle.webkitTransform !== void 0) && 'webkitTransform' ||\n\t\t\t\t\t\t\t\t(bodyStyle.MozTransform !== void 0) && 'MozTransform' ||\n\t\t\t\t\t\t\t\t'transform';\n\t\t\t\t\t\t\t\t\nexports.transitionAttribute =\t(bodyStyle.msTransition !== void 0) && 'msTransition' ||\n\t\t\t\t\t\t\t\t(bodyStyle.webkitTransition !== void 0) && 'webkitTransition' ||\n\t\t\t\t\t\t\t\t(bodyStyle.MozTransition !== void 0) && 'MozTransition' || \n\t\t\t\t\t\t\t\t'transition';\n\nexports.filterAttribute = \t\t(bodyStyle.msFilter !== void 0) && 'msFilter' ||\n\t\t\t\t\t\t\t\t(bodyStyle.webkitFilter !== void 0) && 'webkitFilter' ||\n\t\t\t\t\t\t\t\t(bodyStyle.MozFilter !== void 0) && 'MozFilter' ||\n\t\t\t\t\t\t\t\t'filter';\n\nexports.cssFilterAttribute = \t(bodyStyle.msFilter !== void 0) && '-ms-filter' ||\n\t\t\t\t\t\t\t\t(bodyStyle.webkitFilter !== void 0) && '-webkit-filter' ||\n\t\t\t\t\t\t\t\t(bodyStyle.MozFilter !== void 0) && '-moz-filter' ||\n\t\t\t\t\t\t\t\t'filter';\n\nexports.cssTransformAttribute = (bodyStyle.msTransform !== void 0) && '-ms-transform' ||\n\t\t\t\t\t\t\t\t(bodyStyle.webkitTransform !== void 0) && '-webkit-transform' ||\n\t\t\t\t\t\t\t\t(bodyStyle.MozTransform !== void 0) && '-moz-transform' ||\n\t\t\t\t\t\t\t\t'filter';"],"sourceRoot":"/source/"}